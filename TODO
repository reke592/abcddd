create marker interface for errored events for realtime projections

optimize aggregate loading:
  include aggregate version to commands

complete application layer projections
  active record setters MUST be internal

make this services flow:
  command -> app.Service -> actual record -> domain.Service -> domain aggregates
                                  |                                    |
                  .-- get cache --'                                    |
                  v                                                    v
  query   -> projections <------------------ update --------------- events
  
create test
  employees:
    + create
    + employ
    + separate
    + grantLeave
    + revokeLeave
    + endLeave
    + update salary grade
  salaryGrade:
    + create
    + update
  businessYear:
    + create
    + createConsignee
    + updateConsignee
    + start
    / end
  deductions:
    create
    create payment
    stop
  payroll:
    create
    add payroll consignee
    remove payroll consignee
    include employee
    exclude employee
    adjust deduction
    dispense salary

PS: all record with (history) means golden copies
projections:
  employees:
    + active
    + on leave
    + separated
    registered employees (history) = a registry of all created employee stream
    granted leave requests (history) = request granted and consumed
    revoked leave requests (history) = request granted then revoked
  payroll:
    current payroll
    employee salaries (history)
    previous payrolls (history)
  deductions:
    employee non-mandatory deductions
    employee mandatory deductions (history)
    completed deductions (history)
  business year:
    + current businessYear  -- we store the latest created Id in memory
    + business year with consignee (history)
    annual payroll summary (history)


-----------------------------------
CASE: having 2 same micro-service instance running in different event versions.
TODO: create anti-corruption layer for different event version in aggregate event stream:
  50%   application layer projections
        ... need more clarifications
  0%    domain logic 
        ... pretty hard to picture,
        ... what if the updates is for security meassures in domain aggregate,
        ... do we permit the old version on committing actions?
        ... how about,
        ... we avoid running an outdated microservice, no need to create a compatibility layer. :P

optimize YAMLSerializationTest
- remove monolithic test case

* finish creating command and events